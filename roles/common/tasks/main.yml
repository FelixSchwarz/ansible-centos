---
# This role contains common plays that will run on all nodes.

- include: ssh_server.yml
  tags: sshd

- name: set hostname
  hostname: name={{ hostname|default(ansible_ssh_host|default(inventory_hostname)) }}

- name: set root password
  user: name=root password={{ root_password_hash }}
# can not use the "password_hash()" filter as this would change the password
# change in every ansible run (as root already exists so we can not trigger
# it only once when creating the user)
#  user: name=root password={{ root_password |password_hash('sha512') }}

- name: set configured SELinux mode
  lineinfile:
    dest: /etc/selinux/config
    # need single-quotes here to avoid yaml syntax error
    # https://github.com/ansible/ansible/issues/1341
    regexp: '^\s*SELINUX\s*=\s*'
    line: "SELINUX={{ selinux_mode }}"
    state: present

- name: base packages
  yum:
    name:
      # epel-release is included in CentOS extras which is enabled by default
      - epel-release
      - firewalld
      - cronie
    state: present

- name: Disable CentOS extras
  copy: src=CentOS-Base.repo dest=/etc/yum.repos.d/CentOS-Base.repo

# explicitely setting a custom SSH key is useful for deployments and borg
# backups
- name: check if custom ssh key for root exists
  local_action: stat path=host_files/{{ inventory_hostname }}/sshkey-root
  register: sshkey_root
  ignore_errors: True

- name: copy private SSH key for root
  copy:
    # This file should be encrypted (requires ansible 2.2+)
    src: host_files/{{ inventory_hostname }}/sshkey-root
    dest: /root/.ssh/id_rsa
    owner: root
    group: root
    mode: 0600
  when: sshkey_root.stat.exists

- name: copy public SSH key for root user
  copy:
    src: host_files/{{ inventory_hostname }}/sshkey-root.pub
    dest: /root/.ssh/id_rsa.pub
    owner: root
    group: root
    mode: 0644
  when: sshkey_root.stat.exists


# these utilities might include packages from EPEL so it is important that
# "epel-release" was installed before (see "base packages" above)
- name: install system utilities
  yum:
    name:
      - ack
      - bash-completion
      # for "dig"
      - bind-utils
      - htop
      - iftop
      - iotop
      - logrotate
      - mtr
      # for "netstat"
      - net-tools
      - nano
      - rsync
      - screen
      - sudo
      - telnet
      - tcpdump
      - wget
    state: present

- include: etckeeper.yml
  tags: etckeeper

- include: chrony.yml

# systemd timers do not send emails on failure (as cron does) however we can
# work around that limitation by installing a custom service which will send
# an email with a journalctl output (as systemd records all output anyway the
# admin will have all data necessary to diagnose the problem).
# more in-depth explanation in (and all credits to) the Arch Linux wiki:
# https://wiki.archlinux.org/index.php/Systemd/Timers#MAILTO
- name: install systemd-send-email script
  copy: src=systemd-send-email dest=/usr/local/bin/systemd-send-email owner=root group=root mode=0755

- name: install systemd-status-email.service
  copy: src=systemd-status-email.service dest=/etc/systemd/system/systemd-status-email.service mode=0644
  notify: reload systemd units


- include: yum-cron.yml
  tags: yum-cron

- include: systemd-networkd.yml
  tags: systemd-networkd

- include: systemd-resolved.yml
  tags: systemd-resolved


# This removes a couple of services to save RAM (quite a bit, about 50 MB!)
# also less running services means reduced attack surface.
- name: remove packages
  yum:
    name:
      - tuned             # only necessary for power saving modes for SATA/ethernet
      # items which were only installed for NetworkManager
      # avahi, polkit and wpa_supplicant are daemons so uninstalling them will
      # also reduce memory usage
      - jansson
      - avahi-libs        # no need for service autodiscovery
      - wpa_supplicant    # our servers don't have WLAN
    state: absent

- include: borgbackup.yml
  when: borg_target is defined and borg_target

- name: test to see if selinux is running
  command: getenforce
  register: sestatus
  changed_when: false

- name: redirect mails for root to server admin email
  lineinfile:
    dest: /etc/aliases
    # need single-quotes here to avoid yaml syntax error
    # https://github.com/ansible/ansible/issues/1341
    regexp: '^\s*root:'
    line: "root:		{{ admin_emails | join(', ') }}"
    state: present

# do not require a tty for root to use sudo
# If this is not set ansible's "become_user" will fail with
#   "sudo: sorry, you must have a tty to run sudo"
- name: tty not required by root to sudo
  lineinfile: >
      dest=/etc/sudoers
      state=present
      regexp="^Defaults:root"
      line="Defaults:root !requiretty"

- include: hw-random.yml
  when: use_hwrng == True

# at least with letsencrypt we generate certificates using 4096 bit keys so we
# have to create a custom dhparam.pem to ensure our dhparams are at least
# equally strong.
# We don't have to regenerate the DH params periodically as indicated by
#    http://security.stackexchange.com/a/116502/89584
- name: check if dhparam4096.pem was already generated
  stat: path=/etc/pki/tls/dhparam4096.pem
  register: dhparam

- name: generate stronger DH parameters
  shell: /usr/bin/openssl dhparam -out /etc/pki/tls/dhparam4096.pem 4096
  when: not dhparam.stat.exists

- name: ensure dhparam4096.pem is kept secret
  file: >
    path=/etc/pki/tls/dhparam4096.pem
    state=file
    owner=root group=mail
    mode=0640

# even if I usually disable the terminal bell completely I recently found
# it helpful for notifications after a long-running tasked finished.
# however the bell on tab-completion is absolutely annoying so just switch
# it off.
- name: do not bell on tab-completion
  lineinfile:
    dest: /etc/inputrc
    line: "set bell-style none"
    regexp: "^set bell-style .*"

- meta: flush_handlers

